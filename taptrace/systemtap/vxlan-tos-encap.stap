#!/usr/bin/stap -g --all-modules
#
# Usage: /usr/bin/stap -g --all-modules vxlan-tos-encap.stap
#
# Inspect VXLAN encapsulation of TOS values
# Statement probes correspond to kernel-4.18.0-513.9.1.el8_9

probe begin { printf ("Probing started...\n") }
probe end { printf("Probing stopped.\n") }

%{
#include <linux/version.h>
#include <net/sock.h>
#include <net/tcp.h>
#include <net/ip.h>
#include <linux/skbuff.h>
#include <linux/types.h>
#include <linux/in6.h>
%}

function get_iph_version:long (iphdr:long)
%{ /* pure */
    struct iphdr *iph = (struct iphdr *)(long) STAP_ARG_iphdr;
    struct iphdr iph_copy;
    memset (((void*)&iph_copy), 0, sizeof(iph_copy));
    kderef_buffer(((void *)&iph_copy), iph, sizeof(struct iphdr));
    STAP_RETVALUE = iph_copy.version;
    CATCH_DEREF_FAULT();
%}

function get_iph_tos:long (iphdr:long)
%{ /* pure */
    struct iphdr *iph = (struct iphdr *)(long) STAP_ARG_iphdr;
    struct iphdr iph_copy;
    memset (((void*)&iph_copy), 0, sizeof(iph_copy));
    kderef_buffer(((void *)&iph_copy), iph, sizeof(struct iphdr));
    STAP_RETVALUE = iph_copy.tos;
    CATCH_DEREF_FAULT();
%}

probe module("vxlan").statement("vxlan_xmit_one@drivers/net/vxlan.c:2542")
{
    now = gettimeofday_ns();

    printf("%s (+%9d ns) vxlan_xmit_one@drivers/net/vxlan.c:2542 tos: 0x%x\n", ctime(now / 1000000000), (now % 1000000000), $tos);
}

probe module("vxlan").function("ip_tunnel_ecn_encap").inline
{
    now = gettimeofday_ns();

	old_iph_tos = 0xFF;
    skb_tos = 0xFF;

	try {
		old_iph_version = get_iph_version($iph);
	} catch { };
    if (old_iph_version == 4) {
        try {
            old_iph_tos = get_iph_tos($iph);
        } catch { };
    }

	try {
		skb_iphdr = __get_skb_iphdr($skb);
		skb_ip_version = get_iph_version(skb_iphdr);
	} catch { };
	if (skb_ip_version == 4) {
		try {
			skb_tos = get_iph_tos(skb_iphdr);
		} catch { };
	}

    printf("  %s (+%9d ns) %s tos: 0x%x, old_iph->tos: 0x%x, skb->iphdr->tos: 0x%0x\n", ctime(now / 1000000000), (now % 1000000000), ppfunc(), $tos, old_iph_tos, skb_tos);
}

probe module("vxlan").statement("vxlan_xmit_one@drivers/net/vxlan.c:2563")
{
    now = gettimeofday_ns();

    printf("  %s (+%9d ns) vxlan_xmit_one@drivers/net/vxlan.c:2563 tos: 0x%x\n", ctime(now / 1000000000), (now % 1000000000), $tos);
}

probe module("vxlan").function("ip_tunnel_get_dsfield").inline
{
    now = gettimeofday_ns();

	iph_tos = 0xFF;
    skb_tos = 0xFF;

    try {
        iph_version = get_iph_version($iph);
    } catch { };
    if (iph_version == 4) {
        try {
            iph_tos = get_iph_tos($iph);
        } catch { };
    }

	try {
		skb_iphdr = __get_skb_iphdr($skb);
		skb_ip_version = get_iph_version(skb_iphdr);
	} catch { };
	if (skb_ip_version == 4) {
		try {
			skb_tos = get_iph_tos(skb_iphdr);
		} catch { };
	}

    printf("  %s (+%9d ns) %s iph->tos: 0x%x, skb->iphdr->tos: 0x%0x\n", ctime(now / 1000000000), (now % 1000000000), ppfunc(), iph_tos, skb_tos);
}

probe module("vxlan").function("INET_ECN_encapsulate").inline
{
    now = gettimeofday_ns();

    printf("  %s (+%9d ns) %s inner: 0x%x, outer: 0x%x\n", ctime(now / 1000000000), (now % 1000000000), ppfunc(), $inner, $outer);
}

probe module("vxlan").statement("vxlan_xmit_one@drivers/net/vxlan.c:2564")
{
    now = gettimeofday_ns();

    printf("  %s (+%9d ns) vxlan_xmit_one@drivers/net/vxlan.c:2564 tos: 0x%x\n", ctime(now / 1000000000), (now % 1000000000), $tos);
}

probe module("vxlan").statement("vxlan_xmit_one@drivers/net/vxlan.c:2565")
{
    now = gettimeofday_ns();

    printf("  %s (+%9d ns) vxlan_xmit_one@drivers/net/vxlan.c:2565 tos: 0x%x\n", ctime(now / 1000000000), (now % 1000000000), $tos);
}

probe module("udp_tunnel").function("udp_tunnel_xmit_skb").call
{
    now = gettimeofday_ns();

	skb_tos = 0xFF;

	try {
		skb_iphdr = __get_skb_iphdr($skb);
		skb_ip_version = get_iph_version(skb_iphdr);
	} catch { };
	if (skb_ip_version == 4) {
		try {
			skb_tos = get_iph_tos(skb_iphdr);
		} catch { };
	}
    printf("  %s (+%9d ns) %s skb->iphdr->tos: 0x%x, tos: 0x%x\n", ctime(now / 1000000000), (now % 1000000000), ppfunc(), skb_tos, $tos);
}

probe kernel.function("iptunnel_xmit").call
{
    now = gettimeofday_ns();

    skb_tos = 0xFF;

	try {
		skb_iphdr = __get_skb_iphdr($skb);
		skb_ip_version = get_iph_version(skb_iphdr);
	} catch { };
	if (skb_ip_version == 4) {
		try {
			skb_tos = get_iph_tos(skb_iphdr);
		} catch { };
	}
    printf("  %s (+%9d ns) %s skb->iphdr->tos: 0x%x, tos: 0x%x\n", ctime(now / 1000000000), (now % 1000000000), ppfunc(), skb_tos, $tos);
}

/* never called */
probe module("ip_tunnel").function("ip_tunnel_xmit").call
{
    now = gettimeofday_ns();
    printf("  %s (+%9d ns) %s called\n", ctime(now / 1000000000), (now % 1000000000), ppfunc());
    print_backtrace();
}

