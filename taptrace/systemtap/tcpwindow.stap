#!/usr/bin/stap -g
# tcpwindow.stap begins here
# Prints out TCP Window debugging in various places
# Usage: stap -g tcpwindow.stap <IP_ADDR> <SUBNET>
# Example: stap -g tcpwindow.stap 10.0.0.1 16

%{
#include <linux/version.h>
#include <net/sock.h>
#include <net/tcp.h>
#include <net/ip.h>
#include <linux/skbuff.h>
%}

function tcp_get_info_rwnd:long(sock:long)
%{ /* pure */
    struct sock *sk = (struct sock *)(long) STAP_ARG_sock;
    struct tcp_sock *tp = tcp_sk(sk);
    STAP_RETVALUE = (int64_t) kread(&(tp->rcv_wnd));
    CATCH_DEREF_FAULT();
%}

function get_sip:long(sock:long)
%{ /* pure */
    struct sock *sk = (struct sock *)(long) STAP_ARG_sock;
    struct tcp_sock *tp = tcp_sk(sk);
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38)
/* upstream commit 68835aba */
    STAP_RETVALUE = 0xFFFFFFFF & htonl (kread(&(tp->inet_conn.icsk_inet.inet_rcv_saddr)));
#else
    STAP_RETVALUE = 0xFFFFFFFF & htonl (kread(&(tp->inet_conn.icsk_inet.saddr)));
#endif
    CATCH_DEREF_FAULT();
%}

function get_dip:long(sock:long)
%{ /* pure */
    struct sock *sk = (struct sock *)(long) STAP_ARG_sock;
    struct tcp_sock *tp = tcp_sk(sk);
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38)
/* upstream commit 68835aba */
    STAP_RETVALUE = 0xFFFFFFFF & htonl (kread(&(tp->inet_conn.icsk_inet.inet_daddr)));
#else
    STAP_RETVALUE = 0xFFFFFFFF & htonl (kread(&(tp->inet_conn.icsk_inet.daddr)));
#endif
    CATCH_DEREF_FAULT();
%}

function get_sport:long(sock:long)
%{ /* pure */
    struct sock *sk = (struct sock *)(long) STAP_ARG_sock;
    struct tcp_sock *tp = tcp_sk(sk);
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33)
/* upstream commit c720c7e8 */
    STAP_RETVALUE = 0xFFFF & htons (kread(&(tp->inet_conn.icsk_inet.inet_sport)));
#else
    STAP_RETVALUE = 0xFFFF & htons (kread(&(tp->inet_conn.icsk_inet.sport)));
#endif
    CATCH_DEREF_FAULT();
%}

function get_dport:long(sock:long)
%{ /* pure */
    struct sock *sk = (struct sock *)(long) STAP_ARG_sock;
    struct tcp_sock *tp = tcp_sk(sk);
#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,33)
/* upstream commit c720c7e8 */
    STAP_RETVALUE = 0xFFFF & htons (kread(&(tp->inet_conn.icsk_inet.inet_dport)));
#else
    STAP_RETVALUE = 0xFFFF & htons (kread(&(tp->inet_conn.icsk_inet.dport)));
#endif
    CATCH_DEREF_FAULT();
%}

function get_rcvq_space:long(sock:long)
%{ /* pure */
    struct sock *sk = (struct sock *)(long) STAP_ARG_sock;
    struct tcp_sock *tp = tcp_sk(sk);
    STAP_RETVALUE = (int64_t) kread(&(tp->rcvq_space.space));
    CATCH_DEREF_FAULT();
%}

function get_rcv_ssthresh:long(sock:long)
%{ /* pure */
    struct sock *sk = (struct sock *)(long) STAP_ARG_sock;
    struct tcp_sock *tp = tcp_sk(sk);
    STAP_RETVALUE = (int64_t) kread(&(tp->rcv_ssthresh));
    CATCH_DEREF_FAULT();
%}


function pton:long(str:string)
%{
    unsigned v = 0;
    int i;
    const char * start;

    start = STAP_ARG_str;
    for (i = 0; i < 4; i++) {
        char c;
        int n = 0;
        while (1) {
            c = * start;
            start++;
            if (c >= '0' && c <= '9') {
                n *= 10;
                n += c - '0';
            } else if ((i < 3 && c == '.') || i == 3) {
                break;
            }
        }
        v *= 256;
        v += n;
    }
    STAP_RETVALUE = v;
%}

global uaddr_raw = 0
global umask = $2
global uaddr_mask
global uaddr_masked = 0

probe begin {
    if (uaddr_raw == 0)
        uaddr_raw = pton(@1)

    uaddr_mask = 32 - umask
    uaddr_masked = uaddr_raw >> uaddr_mask

    printf ("Probing started...\n")
}

probe end { printf("Probing stopped.\n") }

probe kernel.function("__tcp_select_window").call,
      kernel.function("__tcp_select_window").return,
      kernel.function("tcp_cleanup_rbuf").call,
      kernel.function("tcp_send_ack").call,
      kernel.function("tcp_transmit_skb").call,
      kernel.function("tcp_transmit_skb").return,
      kernel.function("tcp_send_fin").call,
      kernel.function("tcp_rcv_space_adjust").return
{
    saddr_raw = get_sip($sk)
    if (saddr_raw >> uaddr_mask == uaddr_masked) {
        now = gettimeofday_ns()
        printf("%s (+%9dns) %s(%d) %s %s sk=%x SADDR=%x:%d DADDR=%x:%d rcvbuf=%d sk_receive_queue.qlen=%d rcv_wnd=%d rcvq_space=%d rcv_ssthresh=%d\n", ctime(now / 1000000000), (now % 1000000000), execname(), pid(), (@defined($return) ? "returning from" : "calling"), ppfunc(), $sk, saddr_raw, get_sport($sk), get_dip($sk), get_dport($sk), $sk->sk_rcvbuf, $sk->sk_receive_queue->qlen, tcp_get_info_rwnd($sk), get_rcvq_space($sk), get_rcv_ssthresh($sk))

## EL6 can also add this, but not EL7
# sk_rmem_alloc.counter=%d
# $sk->sk_rmem_alloc->counter

    }
}

#
# tcpwindow.stap ends here
# vim: set ft=c:
